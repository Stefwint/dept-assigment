{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types'; // Styling\n\nimport { Flex, FormLabel } from '../../styles';\nimport STextInput, { SError } from './styles';\n\nvar TextInput = function TextInput(_ref) {\n  var label = _ref.label,\n      id = _ref.id,\n      isRequired = _ref.isRequired,\n      errorMessage = _ref.errorMessage,\n      width = _ref.width,\n      props = _objectWithoutProperties(_ref, [\"label\", \"id\", \"isRequired\", \"errorMessage\", \"width\"]);\n\n  var _useState = useState(''),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState(false),\n      touched = _useState2[0],\n      setTouched = _useState2[1];\n\n  return __jsx(Flex, {\n    my: 30,\n    px: [0, 25],\n    flexDirection: \"column\",\n    width: width\n  }, label && __jsx(Flex, {\n    alignItems: \"center\"\n  }, __jsx(FormLabel, {\n    htmlFor: id\n  }, isRequired ? label + '*' : label)), __jsx(STextInput, _extends({\n    id: id,\n    value: value,\n    onChange: function onChange(e) {\n      return setValue(e.target.value);\n    },\n    onBlur: function onBlur() {\n      return errorMessage && !touched && setTouched(true);\n    },\n    required: isRequired\n  }, props)), errorMessage && touched && !value && __jsx(SError, null, errorMessage.required));\n};\n\nTextInput.propTypes = {\n  label: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool,\n  errorMessage: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.array])\n};\nTextInput.defaultProps = {\n  label: '',\n  isRequired: false,\n  errorMessage: {},\n  width: [1, 1 / 2]\n};\nexport default TextInput;","map":{"version":3,"sources":["/Users/stefwinterswijk/Werk/dept/src/components/Form/Fields/TextInput.jsx"],"names":["React","useState","PropTypes","Flex","FormLabel","STextInput","SError","TextInput","label","id","isRequired","errorMessage","width","props","value","setValue","touched","setTouched","e","target","required","propTypes","string","bool","object","oneOfType","number","array","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,cAAhC;AACA,OAAOC,UAAP,IAAqBC,MAArB,QAAmC,UAAnC;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAA8D;AAAA,MAA3DC,KAA2D,QAA3DA,KAA2D;AAAA,MAApDC,EAAoD,QAApDA,EAAoD;AAAA,MAAhDC,UAAgD,QAAhDA,UAAgD;AAAA,MAApCC,YAAoC,QAApCA,YAAoC;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAZC,KAAY;;AAAA,kBACpDZ,QAAQ,CAAC,EAAD,CAD4C;AAAA,MACvEa,KADuE;AAAA,MAChEC,QADgE;;AAAA,mBAEhDd,QAAQ,CAAC,KAAD,CAFwC;AAAA,MAEvEe,OAFuE;AAAA,MAE9DC,UAF8D;;AAI9E,SACE,MAAC,IAAD;AAAM,IAAA,EAAE,EAAE,EAAV;AAAc,IAAA,EAAE,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAlB;AAA2B,IAAA,aAAa,EAAC,QAAzC;AAAkD,IAAA,KAAK,EAAEL;AAAzD,KACGJ,KAAK,IACJ,MAAC,IAAD;AAAM,IAAA,UAAU,EAAC;AAAjB,KACE,MAAC,SAAD;AAAW,IAAA,OAAO,EAAEC;AAApB,KAAyBC,UAAU,GAAGF,KAAK,GAAG,GAAX,GAAiBA,KAApD,CADF,CAFJ,EAME,MAAC,UAAD;AACE,IAAA,EAAE,EAAEC,EADN;AAEE,IAAA,KAAK,EAAEK,KAFT;AAGE,IAAA,QAAQ,EAAE,kBAAAI,CAAC;AAAA,aAAIH,QAAQ,CAACG,CAAC,CAACC,MAAF,CAASL,KAAV,CAAZ;AAAA,KAHb;AAIE,IAAA,MAAM,EAAE;AAAA,aAAMH,YAAY,IAAI,CAACK,OAAjB,IAA4BC,UAAU,CAAC,IAAD,CAA5C;AAAA,KAJV;AAKE,IAAA,QAAQ,EAAEP;AALZ,KAMMG,KANN,EANF,EAcGF,YAAY,IAAIK,OAAhB,IAA2B,CAACF,KAA5B,IAAqC,MAAC,MAAD,QAASH,YAAY,CAACS,QAAtB,CAdxC,CADF;AAkBD,CAtBD;;AAwBAb,SAAS,CAACc,SAAV,GAAsB;AACpBb,EAAAA,KAAK,EAAEN,SAAS,CAACoB,MADG;AAEpBb,EAAAA,EAAE,EAAEP,SAAS,CAACoB,MAAV,CAAiBZ,UAFD;AAGpBA,EAAAA,UAAU,EAAER,SAAS,CAACqB,IAHF;AAIpBZ,EAAAA,YAAY,EAAET,SAAS,CAACsB,MAJJ;AAKpBZ,EAAAA,KAAK,EAAEV,SAAS,CAACuB,SAAV,CAAoB,CAACvB,SAAS,CAACwB,MAAX,EAAmBxB,SAAS,CAACyB,KAA7B,CAApB;AALa,CAAtB;AAQApB,SAAS,CAACqB,YAAV,GAAyB;AACvBpB,EAAAA,KAAK,EAAE,EADgB;AAEvBE,EAAAA,UAAU,EAAE,KAFW;AAGvBC,EAAAA,YAAY,EAAE,EAHS;AAIvBC,EAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,IAAI,CAAR;AAJgB,CAAzB;AAOA,eAAeL,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n// Styling\nimport { Flex, FormLabel } from '../../styles';\nimport STextInput, { SError } from './styles';\n\nconst TextInput = ({ label, id, isRequired, errorMessage, width, ...props }) => {\n  const [value, setValue] = useState('');\n  const [touched, setTouched] = useState(false);\n\n  return (\n    <Flex my={30} px={[0, 25]} flexDirection=\"column\" width={width}>\n      {label && (\n        <Flex alignItems=\"center\">\n          <FormLabel htmlFor={id}>{isRequired ? label + '*' : label}</FormLabel>\n        </Flex>\n      )}\n      <STextInput\n        id={id}\n        value={value}\n        onChange={e => setValue(e.target.value)}\n        onBlur={() => errorMessage && !touched && setTouched(true)}\n        required={isRequired}\n        {...props}\n      />\n      {errorMessage && touched && !value && <SError>{errorMessage.required}</SError>}\n    </Flex>\n  );\n};\n\nTextInput.propTypes = {\n  label: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool,\n  errorMessage: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.array]),\n};\n\nTextInput.defaultProps = {\n  label: '',\n  isRequired: false,\n  errorMessage: {},\n  width: [1, 1 / 2],\n};\n\nexport default TextInput;\n"]},"metadata":{},"sourceType":"module"}