{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types'; // Styling\n\nimport { Flex, FormLabel } from '../../styles';\nimport STextInput, { SError } from './styles';\n\nvar TextInput = function TextInput(_ref) {\n  var label = _ref.label,\n      name = _ref.name,\n      id = _ref.id,\n      isRequired = _ref.isRequired,\n      errorMessage = _ref.errorMessage,\n      width = _ref.width,\n      register = _ref.register,\n      errors = _ref.errors,\n      props = _objectWithoutProperties(_ref, [\"label\", \"name\", \"id\", \"isRequired\", \"errorMessage\", \"width\", \"register\", \"errors\"]);\n\n  return __jsx(Flex, {\n    mb: [15, 30],\n    mt: [15, 0],\n    px: [0, 25],\n    flexDirection: \"column\",\n    width: width,\n    t: console.log(errors)\n  }, label && __jsx(Flex, {\n    alignItems: \"center\"\n  }, __jsx(FormLabel, {\n    htmlFor: id\n  }, isRequired ? label + '*' : label)), __jsx(STextInput, _extends({\n    name: name,\n    id: id,\n    ref: register({\n      required: isRequired && errorMessage.required\n    })\n  }, props)), errors && __jsx(SError, null, errorMessage.required));\n};\n\nTextInput.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool,\n  errorMessage: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.array]),\n  register: PropTypes.func.isRequired,\n  errors: PropTypes.oneOfType([PropTypes.object, PropTypes.bool])\n};\nTextInput.defaultProps = {\n  label: '',\n  isRequired: false,\n  errorMessage: {},\n  width: [1, 1 / 2],\n  errors: false\n};\nexport default TextInput;","map":{"version":3,"sources":["/Users/stefwinterswijk/Werk/dept/src/components/Form/Fields/TextInput.jsx"],"names":["React","PropTypes","Flex","FormLabel","STextInput","SError","TextInput","label","name","id","isRequired","errorMessage","width","register","errors","props","console","log","required","propTypes","string","bool","object","oneOfType","number","array","func","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,cAAhC;AACA,OAAOC,UAAP,IAAqBC,MAArB,QAAmC,UAAnC;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,MAChBC,KADgB,QAChBA,KADgB;AAAA,MAEhBC,IAFgB,QAEhBA,IAFgB;AAAA,MAGhBC,EAHgB,QAGhBA,EAHgB;AAAA,MAIhBC,UAJgB,QAIhBA,UAJgB;AAAA,MAKhBC,YALgB,QAKhBA,YALgB;AAAA,MAMhBC,KANgB,QAMhBA,KANgB;AAAA,MAOhBC,QAPgB,QAOhBA,QAPgB;AAAA,MAQhBC,MARgB,QAQhBA,MARgB;AAAA,MASbC,KATa;;AAAA,SAWhB,MAAC,IAAD;AACE,IAAA,EAAE,EAAE,CAAC,EAAD,EAAK,EAAL,CADN;AAEE,IAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAL,CAFN;AAGE,IAAA,EAAE,EAAE,CAAC,CAAD,EAAI,EAAJ,CAHN;AAIE,IAAA,aAAa,EAAC,QAJhB;AAKE,IAAA,KAAK,EAAEH,KALT;AAME,IAAA,CAAC,EAAEI,OAAO,CAACC,GAAR,CAAYH,MAAZ;AANL,KAQGP,KAAK,IACJ,MAAC,IAAD;AAAM,IAAA,UAAU,EAAC;AAAjB,KACE,MAAC,SAAD;AAAW,IAAA,OAAO,EAAEE;AAApB,KAAyBC,UAAU,GAAGH,KAAK,GAAG,GAAX,GAAiBA,KAApD,CADF,CATJ,EAaE,MAAC,UAAD;AACE,IAAA,IAAI,EAAEC,IADR;AAEE,IAAA,EAAE,EAAEC,EAFN;AAGE,IAAA,GAAG,EAAEI,QAAQ,CAAC;AACZK,MAAAA,QAAQ,EAAER,UAAU,IAAIC,YAAY,CAACO;AADzB,KAAD;AAHf,KAMMH,KANN,EAbF,EAqBGD,MAAM,IAAI,MAAC,MAAD,QAASH,YAAY,CAACO,QAAtB,CArBb,CAXgB;AAAA,CAAlB;;AAoCAZ,SAAS,CAACa,SAAV,GAAsB;AACpBZ,EAAAA,KAAK,EAAEN,SAAS,CAACmB,MADG;AAEpBZ,EAAAA,IAAI,EAAEP,SAAS,CAACmB,MAAV,CAAiBV,UAFH;AAGpBD,EAAAA,EAAE,EAAER,SAAS,CAACmB,MAAV,CAAiBV,UAHD;AAIpBA,EAAAA,UAAU,EAAET,SAAS,CAACoB,IAJF;AAKpBV,EAAAA,YAAY,EAAEV,SAAS,CAACqB,MALJ;AAMpBV,EAAAA,KAAK,EAAEX,SAAS,CAACsB,SAAV,CAAoB,CAACtB,SAAS,CAACuB,MAAX,EAAmBvB,SAAS,CAACwB,KAA7B,CAApB,CANa;AAOpBZ,EAAAA,QAAQ,EAAEZ,SAAS,CAACyB,IAAV,CAAehB,UAPL;AAQpBI,EAAAA,MAAM,EAAEb,SAAS,CAACsB,SAAV,CAAoB,CAACtB,SAAS,CAACqB,MAAX,EAAmBrB,SAAS,CAACoB,IAA7B,CAApB;AARY,CAAtB;AAWAf,SAAS,CAACqB,YAAV,GAAyB;AACvBpB,EAAAA,KAAK,EAAE,EADgB;AAEvBG,EAAAA,UAAU,EAAE,KAFW;AAGvBC,EAAAA,YAAY,EAAE,EAHS;AAIvBC,EAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,IAAI,CAAR,CAJgB;AAKvBE,EAAAA,MAAM,EAAE;AALe,CAAzB;AAQA,eAAeR,SAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Styling\nimport { Flex, FormLabel } from '../../styles';\nimport STextInput, { SError } from './styles';\n\nconst TextInput = ({\n  label,\n  name,\n  id,\n  isRequired,\n  errorMessage,\n  width,\n  register,\n  errors,\n  ...props\n}) => (\n  <Flex\n    mb={[15, 30]}\n    mt={[15, 0]}\n    px={[0, 25]}\n    flexDirection=\"column\"\n    width={width}\n    t={console.log(errors)}\n  >\n    {label && (\n      <Flex alignItems=\"center\">\n        <FormLabel htmlFor={id}>{isRequired ? label + '*' : label}</FormLabel>\n      </Flex>\n    )}\n    <STextInput\n      name={name}\n      id={id}\n      ref={register({\n        required: isRequired && errorMessage.required,\n      })}\n      {...props}\n    />\n    {errors && <SError>{errorMessage.required}</SError>}\n  </Flex>\n);\n\nTextInput.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool,\n  errorMessage: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.array]),\n  register: PropTypes.func.isRequired,\n  errors: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n};\n\nTextInput.defaultProps = {\n  label: '',\n  isRequired: false,\n  errorMessage: {},\n  width: [1, 1 / 2],\n  errors: false,\n};\n\nexport default TextInput;\n"]},"metadata":{},"sourceType":"module"}