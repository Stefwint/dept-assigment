{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport uuid from 'uuid';\nimport { useForm } from 'react-hook-form'; // Inputs\n\nimport { TextInput, TextArea, Email } from './Fields'; // Styling\n\nimport { Box, Button, Flex } from '../styles';\nimport theme from '../../theme';\n\nvar Form = function Form(_ref) {\n  var fields = _ref.fields,\n      button = _ref.button,\n      onSubmit = _ref.onSubmit;\n\n  var _useForm = useForm(),\n      handleSubmit = _useForm.handleSubmit,\n      register = _useForm.register,\n      errors = _useForm.errors;\n\n  return __jsx(Box, {\n    as: \"form\",\n    onSubmit: handleSubmit(onSubmit)\n  }, fields && __jsx(Flex, {\n    flexWrap: \"wrap\"\n  }, fields.map(function (field) {\n    var _field$errorMessage, _field$errorMessage2, _field$errorMessage3;\n\n    switch (field.type) {\n      case 'text':\n        return __jsx(TextInput, _extends({\n          key: field.name,\n          ref: register({\n            required: field.isRequired && ((_field$errorMessage = field.errorMessage) === null || _field$errorMessage === void 0 ? void 0 : _field$errorMessage.required)\n          }),\n          errors: errors\n        }, field));\n\n      case 'textarea':\n        return __jsx(TextArea, _extends({\n          key: field.name,\n          ref: register({\n            required: field.isRequired && ((_field$errorMessage2 = field.errorMessage) === null || _field$errorMessage2 === void 0 ? void 0 : _field$errorMessage2.required)\n          }),\n          errors: errors\n        }, field));\n\n      case 'email':\n        return __jsx(Email, _extends({\n          key: field.name,\n          ref: register({\n            required: field.isRequired && ((_field$errorMessage3 = field.errorMessage) === null || _field$errorMessage3 === void 0 ? void 0 : _field$errorMessage3.required),\n            pattern: {\n              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n              message: 'henk'\n            }\n          }),\n          errors: errors\n        }, field));\n\n      default:\n        console.warn('missing layout for', field.type);\n        return null;\n    }\n  })), button && __jsx(Box, {\n    ml: [0, 25],\n    mt: [15, 30]\n  }, __jsx(Button, {\n    type: button.type,\n    bg: theme.colors.blue\n  }, button.text)));\n};\n\nForm.propTypes = {\n  fields: PropTypes.arrayOf(PropTypes.object).isRequired,\n  button: PropTypes.object.isRequired,\n  onSubmit: PropTypes.func.isRequired\n};\nexport default Form;","map":{"version":3,"sources":["/Users/stefwinterswijk/Werk/dept/src/components/Form/Form.jsx"],"names":["React","PropTypes","uuid","useForm","TextInput","TextArea","Email","Box","Button","Flex","theme","Form","fields","button","onSubmit","handleSubmit","register","errors","map","field","type","name","required","isRequired","errorMessage","pattern","value","message","console","warn","colors","blue","text","propTypes","arrayOf","object","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport uuid from 'uuid';\nimport { useForm } from 'react-hook-form';\n\n// Inputs\nimport { TextInput, TextArea, Email } from './Fields';\n\n// Styling\nimport { Box, Button, Flex } from '../styles';\nimport theme from '../../theme';\n\nconst Form = ({ fields, button, onSubmit }) => {\n  const { handleSubmit, register, errors } = useForm();\n\n  return (\n    <Box as=\"form\" onSubmit={handleSubmit(onSubmit)}>\n      {fields && (\n        <Flex flexWrap=\"wrap\">\n          {fields.map(field => {\n            switch (field.type) {\n              case 'text':\n                return (\n                  <TextInput\n                    key={field.name}\n                    ref={register({ required: field.isRequired && field.errorMessage?.required })}\n                    errors={errors}\n                    {...field}\n                  />\n                );\n\n              case 'textarea':\n                return (\n                  <TextArea\n                    key={field.name}\n                    ref={register({ required: field.isRequired && field.errorMessage?.required })}\n                    errors={errors}\n                    {...field}\n                  />\n                );\n\n              case 'email':\n                return (\n                  <Email\n                    key={field.name}\n                    ref={register({\n                      required: field.isRequired && field.errorMessage?.required,\n                      pattern: {\n                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                        message: 'henk',\n                      },\n                    })}\n                    errors={errors}\n                    {...field}\n                  />\n                );\n\n              default:\n                console.warn('missing layout for', field.type);\n                return null;\n            }\n          })}\n        </Flex>\n      )}\n      {button && (\n        <Box ml={[0, 25]} mt={[15, 30]}>\n          <Button type={button.type} bg={theme.colors.blue}>\n            {button.text}\n          </Button>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nForm.propTypes = {\n  fields: PropTypes.arrayOf(PropTypes.object).isRequired,\n  button: PropTypes.object.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}