{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types'; // Styling\n\nimport { Flex, FormLabel } from '../../styles';\nimport STextInput, { SError } from './styles';\n\nvar Email = function Email(_ref) {\n  var _errors$name;\n\n  var label = _ref.label,\n      id = _ref.id,\n      name = _ref.name,\n      isRequired = _ref.isRequired,\n      errorMessage = _ref.errorMessage,\n      width = _ref.width,\n      errors = _ref.errors,\n      props = _objectWithoutProperties(_ref, [\"label\", \"id\", \"name\", \"isRequired\", \"errorMessage\", \"width\", \"errors\"]);\n\n  return __jsx(Flex, {\n    mb: [15, 30],\n    mt: [15, 0],\n    px: [0, 25],\n    flexDirection: \"column\",\n    width: width\n  }, label && __jsx(Flex, {\n    alignItems: \"center\"\n  }, __jsx(FormLabel, {\n    htmlFor: id\n  }, isRequired ? label + '*' : label)), __jsx(STextInput, _extends({\n    id: id,\n    name: name\n  }, props)), (errors === null || errors === void 0 ? void 0 : errors.email) && __jsx(SError, null, errorMessage.required), (errors === null || errors === void 0 ? void 0 : (_errors$name = errors[name]) === null || _errors$name === void 0 ? void 0 : _errors$name.message) && __jsx(SError, null, errorMessage.email));\n};\n\nEmail.propTypes = {\n  label: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool,\n  errorMessage: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.array]),\n  errors: PropTypes.oneOfType([PropTypes.object, PropTypes.bool])\n};\nEmail.defaultProps = {\n  label: '',\n  isRequired: false,\n  errorMessage: {},\n  width: [1, 1 / 2],\n  errors: false\n};\nexport default Email;","map":{"version":3,"sources":["/Users/stefwinterswijk/Werk/dept/src/components/Form/Fields/Email.jsx"],"names":["React","PropTypes","Flex","FormLabel","STextInput","SError","Email","label","id","name","isRequired","errorMessage","width","errors","props","email","required","message","propTypes","string","bool","object","oneOfType","number","array","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,cAAhC;AACA,OAAOC,UAAP,IAAqBC,MAArB,QAAmC,UAAnC;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAA4E;AAAA;;AAAA,MAAzEC,KAAyE,QAAzEA,KAAyE;AAAA,MAAlEC,EAAkE,QAAlEA,EAAkE;AAAA,MAA9DC,IAA8D,QAA9DA,IAA8D;AAAA,MAAxDC,UAAwD,QAAxDA,UAAwD;AAAA,MAA5CC,YAA4C,QAA5CA,YAA4C;AAAA,MAA9BC,KAA8B,QAA9BA,KAA8B;AAAA,MAAvBC,MAAuB,QAAvBA,MAAuB;AAAA,MAAZC,KAAY;;AACxF,SACE,MAAC,IAAD;AAAM,IAAA,EAAE,EAAE,CAAC,EAAD,EAAK,EAAL,CAAV;AAAoB,IAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAL,CAAxB;AAAiC,IAAA,EAAE,EAAE,CAAC,CAAD,EAAI,EAAJ,CAArC;AAA8C,IAAA,aAAa,EAAC,QAA5D;AAAqE,IAAA,KAAK,EAAEF;AAA5E,KACGL,KAAK,IACJ,MAAC,IAAD;AAAM,IAAA,UAAU,EAAC;AAAjB,KACE,MAAC,SAAD;AAAW,IAAA,OAAO,EAAEC;AAApB,KAAyBE,UAAU,GAAGH,KAAK,GAAG,GAAX,GAAiBA,KAApD,CADF,CAFJ,EAME,MAAC,UAAD;AAAY,IAAA,EAAE,EAAEC,EAAhB;AAAoB,IAAA,IAAI,EAAEC;AAA1B,KAAoCK,KAApC,EANF,EAOG,CAAAD,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEE,KAAR,KAAiB,MAAC,MAAD,QAASJ,YAAY,CAACK,QAAtB,CAPpB,EAQG,CAAAH,MAAM,SAAN,IAAAA,MAAM,WAAN,4BAAAA,MAAM,CAAGJ,IAAH,CAAN,8DAAgBQ,OAAhB,KAA2B,MAAC,MAAD,QAASN,YAAY,CAACI,KAAtB,CAR9B,CADF;AAYD,CAbD;;AAeAT,KAAK,CAACY,SAAN,GAAkB;AAChBX,EAAAA,KAAK,EAAEN,SAAS,CAACkB,MADD;AAEhBX,EAAAA,EAAE,EAAEP,SAAS,CAACkB,MAAV,CAAiBT,UAFL;AAGhBA,EAAAA,UAAU,EAAET,SAAS,CAACmB,IAHN;AAIhBT,EAAAA,YAAY,EAAEV,SAAS,CAACoB,MAJR;AAKhBT,EAAAA,KAAK,EAAEX,SAAS,CAACqB,SAAV,CAAoB,CAACrB,SAAS,CAACsB,MAAX,EAAmBtB,SAAS,CAACuB,KAA7B,CAApB,CALS;AAMhBX,EAAAA,MAAM,EAAEZ,SAAS,CAACqB,SAAV,CAAoB,CAACrB,SAAS,CAACoB,MAAX,EAAmBpB,SAAS,CAACmB,IAA7B,CAApB;AANQ,CAAlB;AASAd,KAAK,CAACmB,YAAN,GAAqB;AACnBlB,EAAAA,KAAK,EAAE,EADY;AAEnBG,EAAAA,UAAU,EAAE,KAFO;AAGnBC,EAAAA,YAAY,EAAE,EAHK;AAInBC,EAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,IAAI,CAAR,CAJY;AAKnBC,EAAAA,MAAM,EAAE;AALW,CAArB;AAQA,eAAeP,KAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Styling\nimport { Flex, FormLabel } from '../../styles';\nimport STextInput, { SError } from './styles';\n\nconst Email = ({ label, id, name, isRequired, errorMessage, width, errors, ...props }) => {\n  return (\n    <Flex mb={[15, 30]} mt={[15, 0]} px={[0, 25]} flexDirection=\"column\" width={width}>\n      {label && (\n        <Flex alignItems=\"center\">\n          <FormLabel htmlFor={id}>{isRequired ? label + '*' : label}</FormLabel>\n        </Flex>\n      )}\n      <STextInput id={id} name={name} {...props} />\n      {errors?.email && <SError>{errorMessage.required}</SError>}\n      {errors?.[name]?.message && <SError>{errorMessage.email}</SError>}\n    </Flex>\n  );\n};\n\nEmail.propTypes = {\n  label: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool,\n  errorMessage: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.array]),\n  errors: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n};\n\nEmail.defaultProps = {\n  label: '',\n  isRequired: false,\n  errorMessage: {},\n  width: [1, 1 / 2],\n  errors: false,\n};\n\nexport default Email;\n"]},"metadata":{},"sourceType":"module"}