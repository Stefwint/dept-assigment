{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport uuid from 'uuid';\nimport { useForm } from 'react-hook-form'; // Inputs\n\nimport { TextInput, TextArea, Email } from './Fields'; // Styling\n\nimport { Box, Button, Flex } from '../styles';\nimport theme from '../../theme';\n\nvar Form = function Form(_ref) {\n  var fields = _ref.fields,\n      button = _ref.button,\n      onSubmit = _ref.onSubmit;\n\n  var _useForm = useForm(),\n      handleSubmit = _useForm.handleSubmit,\n      register = _useForm.register,\n      errors = _useForm.errors;\n\n  return __jsx(Box, {\n    as: \"form\",\n    onSubmit: handleSubmit(onSubmit)\n  }, fields && __jsx(Flex, {\n    flexWrap: \"wrap\"\n  }, fields.map(function (field) {\n    var _field$errorMessage, _field$errorMessage2, _field$errorMessage3, _field$errorMessage4;\n\n    switch (field.type) {\n      case 'text':\n        return __jsx(TextInput, _extends({\n          key: field.name,\n          ref: register({\n            required: field.isRequired && ((_field$errorMessage = field.errorMessage) === null || _field$errorMessage === void 0 ? void 0 : _field$errorMessage.required)\n          }),\n          errors: errors\n        }, field));\n\n      case 'textarea':\n        return __jsx(TextArea, _extends({\n          key: field.name,\n          ref: register({\n            required: field.isRequired && ((_field$errorMessage2 = field.errorMessage) === null || _field$errorMessage2 === void 0 ? void 0 : _field$errorMessage2.required)\n          }),\n          errors: errors\n        }, field));\n\n      case 'email':\n        return __jsx(Email, _extends({\n          key: field.name,\n          ref: register({\n            required: field.isRequired && ((_field$errorMessage3 = field.errorMessage) === null || _field$errorMessage3 === void 0 ? void 0 : _field$errorMessage3.required),\n            pattern: {\n              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n              message: (_field$errorMessage4 = field.errorMessage) === null || _field$errorMessage4 === void 0 ? void 0 : _field$errorMessage4.email\n            }\n          }),\n          errors: errors\n        }, field));\n\n      default:\n        console.warn('missing layout for', field.type);\n        return null;\n    }\n  })), button && __jsx(Box, {\n    ml: [0, 25],\n    mt: [15, 30]\n  }, __jsx(Button, {\n    type: button.type,\n    bg: theme.colors.blue\n  }, button.text)));\n};\n\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}