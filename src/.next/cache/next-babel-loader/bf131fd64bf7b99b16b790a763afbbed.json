{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types'; // Styling\n\nimport { Flex, FormLabel } from '../../styles';\nimport STextInput, { SError } from './styles';\n\nvar TextInput = function TextInput(_ref) {\n  var label = _ref.label,\n      name = _ref.name,\n      id = _ref.id,\n      isRequired = _ref.isRequired,\n      errorMessage = _ref.errorMessage,\n      width = _ref.width,\n      errors = _ref.errors,\n      props = _objectWithoutProperties(_ref, [\"label\", \"name\", \"id\", \"isRequired\", \"errorMessage\", \"width\", \"errors\"]);\n\n  return __jsx(Flex, {\n    mb: [15, 30],\n    mt: [15, 0],\n    px: [0, 25],\n    flexDirection: \"column\",\n    width: width\n  }, label && __jsx(Flex, {\n    alignItems: \"center\"\n  }, __jsx(FormLabel, {\n    htmlFor: id\n  }, isRequired ? label + '*' : label)), __jsx(STextInput, _extends({\n    name: name,\n    id: id\n  }, props)), (errors === null || errors === void 0 ? void 0 : errors[name].message) && __jsx(SError, null, errorMessage.required));\n};\n\nTextInput.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool,\n  errorMessage: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.array]),\n  errors: PropTypes.oneOfType([PropTypes.object, PropTypes.bool])\n};\nTextInput.defaultProps = {\n  label: '',\n  isRequired: false,\n  errorMessage: {},\n  width: [1, 1 / 2],\n  errors: false\n};\nexport default TextInput;","map":{"version":3,"sources":["/Users/stefwinterswijk/Werk/dept/src/components/Form/Fields/TextInput.jsx"],"names":["React","PropTypes","Flex","FormLabel","STextInput","SError","TextInput","label","name","id","isRequired","errorMessage","width","errors","props","message","required","propTypes","string","bool","object","oneOfType","number","array","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,cAAhC;AACA,OAAOC,UAAP,IAAqBC,MAArB,QAAmC,UAAnC;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,IAAV,QAAUA,IAAV;AAAA,MAAgBC,EAAhB,QAAgBA,EAAhB;AAAA,MAAoBC,UAApB,QAAoBA,UAApB;AAAA,MAAgCC,YAAhC,QAAgCA,YAAhC;AAAA,MAA8CC,KAA9C,QAA8CA,KAA9C;AAAA,MAAqDC,MAArD,QAAqDA,MAArD;AAAA,MAAgEC,KAAhE;;AAAA,SAChB,MAAC,IAAD;AAAM,IAAA,EAAE,EAAE,CAAC,EAAD,EAAK,EAAL,CAAV;AAAoB,IAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAL,CAAxB;AAAiC,IAAA,EAAE,EAAE,CAAC,CAAD,EAAI,EAAJ,CAArC;AAA8C,IAAA,aAAa,EAAC,QAA5D;AAAqE,IAAA,KAAK,EAAEF;AAA5E,KACGL,KAAK,IACJ,MAAC,IAAD;AAAM,IAAA,UAAU,EAAC;AAAjB,KACE,MAAC,SAAD;AAAW,IAAA,OAAO,EAAEE;AAApB,KAAyBC,UAAU,GAAGH,KAAK,GAAG,GAAX,GAAiBA,KAApD,CADF,CAFJ,EAME,MAAC,UAAD;AAAY,IAAA,IAAI,EAAEC,IAAlB;AAAwB,IAAA,EAAE,EAAEC;AAA5B,KAAoCK,KAApC,EANF,EAOG,CAAAD,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAGL,IAAH,CAAN,CAAeO,OAAf,KAA0B,MAAC,MAAD,QAASJ,YAAY,CAACK,QAAtB,CAP7B,CADgB;AAAA,CAAlB;;AAYAV,SAAS,CAACW,SAAV,GAAsB;AACpBV,EAAAA,KAAK,EAAEN,SAAS,CAACiB,MADG;AAEpBV,EAAAA,IAAI,EAAEP,SAAS,CAACiB,MAAV,CAAiBR,UAFH;AAGpBD,EAAAA,EAAE,EAAER,SAAS,CAACiB,MAAV,CAAiBR,UAHD;AAIpBA,EAAAA,UAAU,EAAET,SAAS,CAACkB,IAJF;AAKpBR,EAAAA,YAAY,EAAEV,SAAS,CAACmB,MALJ;AAMpBR,EAAAA,KAAK,EAAEX,SAAS,CAACoB,SAAV,CAAoB,CAACpB,SAAS,CAACqB,MAAX,EAAmBrB,SAAS,CAACsB,KAA7B,CAApB,CANa;AAOpBV,EAAAA,MAAM,EAAEZ,SAAS,CAACoB,SAAV,CAAoB,CAACpB,SAAS,CAACmB,MAAX,EAAmBnB,SAAS,CAACkB,IAA7B,CAApB;AAPY,CAAtB;AAUAb,SAAS,CAACkB,YAAV,GAAyB;AACvBjB,EAAAA,KAAK,EAAE,EADgB;AAEvBG,EAAAA,UAAU,EAAE,KAFW;AAGvBC,EAAAA,YAAY,EAAE,EAHS;AAIvBC,EAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,IAAI,CAAR,CAJgB;AAKvBC,EAAAA,MAAM,EAAE;AALe,CAAzB;AAQA,eAAeP,SAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Styling\nimport { Flex, FormLabel } from '../../styles';\nimport STextInput, { SError } from './styles';\n\nconst TextInput = ({ label, name, id, isRequired, errorMessage, width, errors, ...props }) => (\n  <Flex mb={[15, 30]} mt={[15, 0]} px={[0, 25]} flexDirection=\"column\" width={width}>\n    {label && (\n      <Flex alignItems=\"center\">\n        <FormLabel htmlFor={id}>{isRequired ? label + '*' : label}</FormLabel>\n      </Flex>\n    )}\n    <STextInput name={name} id={id} {...props} />\n    {errors?.[name].message && <SError>{errorMessage.required}</SError>}\n  </Flex>\n);\n\nTextInput.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool,\n  errorMessage: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.array]),\n  errors: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n};\n\nTextInput.defaultProps = {\n  label: '',\n  isRequired: false,\n  errorMessage: {},\n  width: [1, 1 / 2],\n  errors: false,\n};\n\nexport default TextInput;\n"]},"metadata":{},"sourceType":"module"}