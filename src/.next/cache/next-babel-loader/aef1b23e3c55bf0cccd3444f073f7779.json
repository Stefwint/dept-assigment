{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport uuid from 'uuid';\nimport { useForm } from 'react-hook-form'; // Inputs\n\nimport { TextInput, TextArea, Email } from './Fields'; // Styling\n\nimport { Box, Button, Flex } from '../styles';\nimport theme from '../../theme';\n\nvar Form = function Form(_ref) {\n  var fields = _ref.fields,\n      button = _ref.button,\n      onSubmit = _ref.onSubmit;\n\n  var _useForm = useForm(),\n      handleSubmit = _useForm.handleSubmit,\n      register = _useForm.register,\n      errors = _useForm.errors;\n\n  console.log(errors);\n  return __jsx(Box, {\n    as: \"form\",\n    onSubmit: handleSubmit(onSubmit)\n  }, fields && __jsx(Flex, {\n    flexWrap: \"wrap\"\n  }, fields.map(function (field) {\n    switch (field.type) {\n      case 'text':\n        return __jsx(TextInput, _extends({\n          key: uuid(),\n          register: register,\n          errors: errors\n        }, field));\n\n      case 'textarea':\n        return __jsx(TextArea, _extends({\n          key: uuid(),\n          register: register,\n          errors: errors\n        }, field));\n\n      case 'email':\n        return __jsx(Email, _extends({\n          key: uuid(),\n          register: register,\n          errors: errors\n        }, field));\n\n      default:\n        console.warn('missing layout for', field.type);\n        return null;\n    }\n  })), button && __jsx(Box, {\n    ml: [0, 25],\n    mt: [15, 30]\n  }, __jsx(Button, {\n    type: button.type,\n    bg: theme.colors.blue\n  }, button.text)));\n};\n\nForm.propTypes = {\n  fields: PropTypes.arrayOf(PropTypes.object).isRequired,\n  button: PropTypes.object.isRequired,\n  onSubmit: PropTypes.func.isRequired\n};\nexport default Form;","map":{"version":3,"sources":["/Users/stefwinterswijk/Werk/dept/src/components/Form/Form.jsx"],"names":["React","PropTypes","uuid","useForm","TextInput","TextArea","Email","Box","Button","Flex","theme","Form","fields","button","onSubmit","handleSubmit","register","errors","console","log","map","field","type","warn","colors","blue","text","propTypes","arrayOf","object","isRequired","func"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,OAAT,QAAwB,iBAAxB,C,CAEA;;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,KAA9B,QAA2C,UAA3C,C,CAEA;;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,IAAtB,QAAkC,WAAlC;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAkC;AAAA,MAA/BC,MAA+B,QAA/BA,MAA+B;AAAA,MAAvBC,MAAuB,QAAvBA,MAAuB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,iBACFX,OAAO,EADL;AAAA,MACrCY,YADqC,YACrCA,YADqC;AAAA,MACvBC,QADuB,YACvBA,QADuB;AAAA,MACbC,MADa,YACbA,MADa;;AAG7CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAEA,SACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAC,MAAR;AAAe,IAAA,QAAQ,EAAEF,YAAY,CAACD,QAAD;AAArC,KACGF,MAAM,IACL,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAC;AAAf,KACGA,MAAM,CAACQ,GAAP,CAAW,UAAAC,KAAK,EAAI;AACnB,YAAQA,KAAK,CAACC,IAAd;AACE,WAAK,MAAL;AACE,eAAO,MAAC,SAAD;AAAW,UAAA,GAAG,EAAEpB,IAAI,EAApB;AAAwB,UAAA,QAAQ,EAAEc,QAAlC;AAA4C,UAAA,MAAM,EAAEC;AAApD,WAAgEI,KAAhE,EAAP;;AAEF,WAAK,UAAL;AACE,eAAO,MAAC,QAAD;AAAU,UAAA,GAAG,EAAEnB,IAAI,EAAnB;AAAuB,UAAA,QAAQ,EAAEc,QAAjC;AAA2C,UAAA,MAAM,EAAEC;AAAnD,WAA+DI,KAA/D,EAAP;;AAEF,WAAK,OAAL;AACE,eAAO,MAAC,KAAD;AAAO,UAAA,GAAG,EAAEnB,IAAI,EAAhB;AAAoB,UAAA,QAAQ,EAAEc,QAA9B;AAAwC,UAAA,MAAM,EAAEC;AAAhD,WAA4DI,KAA5D,EAAP;;AAEF;AACEH,QAAAA,OAAO,CAACK,IAAR,CAAa,oBAAb,EAAmCF,KAAK,CAACC,IAAzC;AACA,eAAO,IAAP;AAZJ;AAcD,GAfA,CADH,CAFJ,EAqBGT,MAAM,IACL,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAT;AAAkB,IAAA,EAAE,EAAE,CAAC,EAAD,EAAK,EAAL;AAAtB,KACE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAEA,MAAM,CAACS,IAArB;AAA2B,IAAA,EAAE,EAAEZ,KAAK,CAACc,MAAN,CAAaC;AAA5C,KACGZ,MAAM,CAACa,IADV,CADF,CAtBJ,CADF;AA+BD,CApCD;;AAsCAf,IAAI,CAACgB,SAAL,GAAiB;AACff,EAAAA,MAAM,EAAEX,SAAS,CAAC2B,OAAV,CAAkB3B,SAAS,CAAC4B,MAA5B,EAAoCC,UAD7B;AAEfjB,EAAAA,MAAM,EAAEZ,SAAS,CAAC4B,MAAV,CAAiBC,UAFV;AAGfhB,EAAAA,QAAQ,EAAEb,SAAS,CAAC8B,IAAV,CAAeD;AAHV,CAAjB;AAMA,eAAenB,IAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport uuid from 'uuid';\nimport { useForm } from 'react-hook-form';\n\n// Inputs\nimport { TextInput, TextArea, Email } from './Fields';\n\n// Styling\nimport { Box, Button, Flex } from '../styles';\nimport theme from '../../theme';\n\nconst Form = ({ fields, button, onSubmit }) => {\n  const { handleSubmit, register, errors } = useForm();\n\n  console.log(errors);\n\n  return (\n    <Box as=\"form\" onSubmit={handleSubmit(onSubmit)}>\n      {fields && (\n        <Flex flexWrap=\"wrap\">\n          {fields.map(field => {\n            switch (field.type) {\n              case 'text':\n                return <TextInput key={uuid()} register={register} errors={errors} {...field} />;\n\n              case 'textarea':\n                return <TextArea key={uuid()} register={register} errors={errors} {...field} />;\n\n              case 'email':\n                return <Email key={uuid()} register={register} errors={errors} {...field} />;\n\n              default:\n                console.warn('missing layout for', field.type);\n                return null;\n            }\n          })}\n        </Flex>\n      )}\n      {button && (\n        <Box ml={[0, 25]} mt={[15, 30]}>\n          <Button type={button.type} bg={theme.colors.blue}>\n            {button.text}\n          </Button>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nForm.propTypes = {\n  fields: PropTypes.arrayOf(PropTypes.object).isRequired,\n  button: PropTypes.object.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}