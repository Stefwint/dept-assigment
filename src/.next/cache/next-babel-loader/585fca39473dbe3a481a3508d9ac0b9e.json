{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types'; // Styling\n\nimport { Flex, FormLabel } from '../../styles';\nimport STextInput, { SError } from './styles';\n\nvar Email = function Email(_ref) {\n  var label = _ref.label,\n      id = _ref.id,\n      isRequired = _ref.isRequired,\n      errorMessage = _ref.errorMessage,\n      props = _objectWithoutProperties(_ref, [\"label\", \"id\", \"isRequired\", \"errorMessage\"]);\n\n  var _useState = useState(''),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState(false),\n      touched = _useState2[0],\n      setTouched = _useState2[1];\n\n  return __jsx(Flex, {\n    width: 1,\n    px: 25,\n    flexDirection: \"column\"\n  }, label && __jsx(Flex, {\n    alignItems: \"center\"\n  }, __jsx(FormLabel, {\n    htmlFor: id\n  }, isRequired ? label + '*' : label)), __jsx(STextInput, _extends({\n    id: id,\n    value: value,\n    onChange: function onChange(e) {\n      return setValue(e.target.value);\n    },\n    onBlur: function onBlur() {\n      return errorMessage && !touched && setTouched(true);\n    }\n  }, props)), errorMessage && touched && !value && __jsx(SError, null, errorMessage.required));\n};\n\nEmail.propTypes = {\n  label: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool,\n  errorMessage: PropTypes.object\n};\nEmail.defaultProps = {\n  label: '',\n  isRequired: false,\n  errorMessage: {}\n};\nexport default Email;","map":{"version":3,"sources":["/Users/stefwinterswijk/Werk/dept/src/components/Form/Fields/Email.jsx"],"names":["React","useState","PropTypes","Flex","FormLabel","STextInput","SError","Email","label","id","isRequired","errorMessage","props","value","setValue","touched","setTouched","e","target","required","propTypes","string","bool","object","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,cAAhC;AACA,OAAOC,UAAP,IAAqBC,MAArB,QAAmC,UAAnC;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAuD;AAAA,MAApDC,KAAoD,QAApDA,KAAoD;AAAA,MAA7CC,EAA6C,QAA7CA,EAA6C;AAAA,MAAzCC,UAAyC,QAAzCA,UAAyC;AAAA,MAA7BC,YAA6B,QAA7BA,YAA6B;AAAA,MAAZC,KAAY;;AAAA,kBACzCX,QAAQ,CAAC,EAAD,CADiC;AAAA,MAC5DY,KAD4D;AAAA,MACrDC,QADqD;;AAAA,mBAErCb,QAAQ,CAAC,KAAD,CAF6B;AAAA,MAE5Dc,OAF4D;AAAA,MAEnDC,UAFmD;;AAInE,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAAb;AAAgB,IAAA,EAAE,EAAE,EAApB;AAAwB,IAAA,aAAa,EAAC;AAAtC,KACGR,KAAK,IACJ,MAAC,IAAD;AAAM,IAAA,UAAU,EAAC;AAAjB,KACE,MAAC,SAAD;AAAW,IAAA,OAAO,EAAEC;AAApB,KAAyBC,UAAU,GAAGF,KAAK,GAAG,GAAX,GAAiBA,KAApD,CADF,CAFJ,EAME,MAAC,UAAD;AACE,IAAA,EAAE,EAAEC,EADN;AAEE,IAAA,KAAK,EAAEI,KAFT;AAGE,IAAA,QAAQ,EAAE,kBAAAI,CAAC;AAAA,aAAIH,QAAQ,CAACG,CAAC,CAACC,MAAF,CAASL,KAAV,CAAZ;AAAA,KAHb;AAIE,IAAA,MAAM,EAAE;AAAA,aAAMF,YAAY,IAAI,CAACI,OAAjB,IAA4BC,UAAU,CAAC,IAAD,CAA5C;AAAA;AAJV,KAKMJ,KALN,EANF,EAaGD,YAAY,IAAII,OAAhB,IAA2B,CAACF,KAA5B,IAAqC,MAAC,MAAD,QAASF,YAAY,CAACQ,QAAtB,CAbxC,CADF;AAiBD,CArBD;;AAuBAZ,KAAK,CAACa,SAAN,GAAkB;AAChBZ,EAAAA,KAAK,EAAEN,SAAS,CAACmB,MADD;AAEhBZ,EAAAA,EAAE,EAAEP,SAAS,CAACmB,MAAV,CAAiBX,UAFL;AAGhBA,EAAAA,UAAU,EAAER,SAAS,CAACoB,IAHN;AAIhBX,EAAAA,YAAY,EAAET,SAAS,CAACqB;AAJR,CAAlB;AAOAhB,KAAK,CAACiB,YAAN,GAAqB;AACnBhB,EAAAA,KAAK,EAAE,EADY;AAEnBE,EAAAA,UAAU,EAAE,KAFO;AAGnBC,EAAAA,YAAY,EAAE;AAHK,CAArB;AAMA,eAAeJ,KAAf","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n// Styling\nimport { Flex, FormLabel } from '../../styles';\nimport STextInput, { SError } from './styles';\n\nconst Email = ({ label, id, isRequired, errorMessage, ...props }) => {\n  const [value, setValue] = useState('');\n  const [touched, setTouched] = useState(false);\n\n  return (\n    <Flex width={1} px={25} flexDirection=\"column\">\n      {label && (\n        <Flex alignItems=\"center\">\n          <FormLabel htmlFor={id}>{isRequired ? label + '*' : label}</FormLabel>\n        </Flex>\n      )}\n      <STextInput\n        id={id}\n        value={value}\n        onChange={e => setValue(e.target.value)}\n        onBlur={() => errorMessage && !touched && setTouched(true)}\n        {...props}\n      />\n      {errorMessage && touched && !value && <SError>{errorMessage.required}</SError>}\n    </Flex>\n  );\n};\n\nEmail.propTypes = {\n  label: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  isRequired: PropTypes.bool,\n  errorMessage: PropTypes.object,\n};\n\nEmail.defaultProps = {\n  label: '',\n  isRequired: false,\n  errorMessage: {},\n};\n\nexport default Email;\n"]},"metadata":{},"sourceType":"module"}